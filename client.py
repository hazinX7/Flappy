import tkinter as tk
from tkinter import messagebox
import threading
import requests
import random
import pygame
import sys

class FlappyBird:
    def __init__(self, token):
        pygame.init()
        self.screen = pygame.display.set_mode((400, 708))
        self.token = token
        self.bird = pygame.Rect(65, 50, 50, 50)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        try:
            self.background = pygame.image.load("./assets/background.png").convert()
            self.birdSprites = [
                pygame.image.load("./assets/1.png").convert_alpha(),  # –ü—Ç–∏—Ü–∞ –ª–µ—Ç–∏—Ç –≤–Ω–∏–∑
                pygame.image.load("./assets/2.png").convert_alpha(),  # –ü—Ç–∏—Ü–∞ –ª–µ—Ç–∏—Ç –≤–≤–µ—Ä—Ö
                pygame.image.load("./assets/dead.png").convert_alpha()  # –ú—ë—Ä—Ç–≤–∞—è –ø—Ç–∏—Ü–∞
            ]
            self.wallUp = pygame.image.load("./assets/bottom.png").convert_alpha()
            self.wallDown = pygame.image.load("./assets/top.png").convert_alpha()
        except pygame.error as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ assets:")
            print("- background.png (–∑–∞–¥–Ω–∏–π —Ñ–æ–Ω)")
            print("- 1.png (–ø—Ç–∏—Ü–∞ –ª–µ—Ç–∏—Ç –≤–Ω–∏–∑)")
            print("- 2.png (–ø—Ç–∏—Ü–∞ –ª–µ—Ç–∏—Ç –≤–≤–µ—Ä—Ö)")
            print("- dead.png (–º—ë—Ä—Ç–≤–∞—è –ø—Ç–∏—Ü–∞)")
            print("- bottom.png (–Ω–∏–∂–Ω—è—è —Ç—Ä—É–±–∞)")
            print("- top.png (–≤–µ—Ä—Ö–Ω—è—è —Ç—Ä—É–±–∞)")
            sys.exit(1)

        self.gap = 130
        self.wallx = 400
        self.birdY = 350
        self.jump = 0
        self.jumpSpeed = 10
        self.gravity = 5
        self.dead = False
        self.sprite = 0  # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–ø—Ä–∞–π—Ç–∞
        self.counter = 0
        self.offset = random.randint(-110, 110)
        self.show_leaderboard = False
        self.leaderboard_data = []
        self.update_leaderboard()
        self.reset_game()  # –í—ã–∑—ã–≤–∞–µ–º reset_game –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

    def update_leaderboard(self):
        try:
            response = requests.get("http://127.0.0.1:8001/leaderboard")
            self.leaderboard_data = response.json()
        except requests.RequestException:
            self.leaderboard_data = []

    def save_score(self):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
            if not self.token:
                print("Error: No authentication token")
                return

            headers = {
                "Authorization": f"Bearer {self.token}",
                "Content-Type": "application/json"
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç –∫–∞–∫ JSON
            data = {"score": self.counter}
            response = requests.post(
                "http://127.0.0.1:8001/scores",
                json=data,  # –ò–∑–º–µ–Ω—è–µ–º params –Ω–∞ json
                headers=headers
            )
            
            print(f"Score saved response: {response.status_code}, {response.text}")
            if response.status_code != 200:
                print(f"Error saving score: {response.json()}")
        except requests.RequestException as e:
            print(f"Error saving score: {e}")

    def draw_leaderboard(self):
        font = pygame.font.SysFont("Arial", 25)
        y = 50
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        title = font.render("–¢–ê–ë–õ–ò–¶–ê –õ–ò–î–ï–†–û–í", True, (255, 255, 255))
        title_rect = title.get_rect(centerx=self.screen.get_width() // 2, y=y)
        self.screen.blit(title, title_rect)
        y += 50
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
        if not self.leaderboard_data:
            text = font.render("–ù–µ—Ç —Ä–µ–∫–æ—Ä–¥–æ–≤", True, (255, 255, 255))
            text_rect = text.get_rect(centerx=self.screen.get_width() // 2, y=y)
            self.screen.blit(text, text_rect)
            return
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        medals = ["ü•á", "ü•à", "ü•â"]
        for item in self.leaderboard_data:
            position = item["position"]
            if position <= 3:
                medal = medals[position - 1]
                text = f"{medal} {item['username']}"
                score = f"{item['score']}"
                
                # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
                name_text = font.render(text, True, (255, 255, 255))
                name_rect = name_text.get_rect(centerx=self.screen.get_width() // 2 - 50, y=y)
                self.screen.blit(name_text, name_rect)
                
                # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—á–µ—Ç–∞
                score_text = font.render(score, True, (255, 255, 255))
                score_rect = score_text.get_rect(left=name_rect.right + 20, centery=name_rect.centery)
                self.screen.blit(score_text, score_rect)
                
                y += 40

    def reset_game(self):
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã
        self.birdY = 350
        self.wallx = 400
        self.jump = 0
        self.jumpSpeed = 10
        self.gravity = 5
        self.dead = False
        self.sprite = 0
        self.counter = 0
        self.offset = random.randint(-110, 110)
        self.show_leaderboard = False

    def run(self):
        pygame.init()
        clock = pygame.time.Clock()
        running = True
        
        while running:
            # –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
            while not self.dead:
                self.game_loop()
                clock.tick(60)
            
            # –ü–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏
            self.sprite = 2  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–π—Ç –º—ë—Ä—Ç–≤–æ–π –ø—Ç–∏—Ü—ã
            self.screen.blit(self.birdSprites[self.sprite], (70, self.birdY))
            pygame.display.update()
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —ç–∫—Ä–∞–Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
            pygame.time.wait(500)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.save_score()
            self.update_leaderboard()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
            if self.show_game_over():  # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞–∂–∞–ª Enter
                self.reset_game()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä—É
            else:  # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞–∂–∞–ª ESC –∏–ª–∏ –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ
                running = False
                pygame.quit()

    def game_loop(self):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN or event.type == pygame.MOUSEBUTTONDOWN:
                if (event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE) or event.type == pygame.MOUSEBUTTONDOWN:
                    self.jump = 17
                    self.gravity = 5
                    self.jumpSpeed = 10
                elif event.type == pygame.KEYDOWN and event.key == pygame.K_TAB:
                    self.show_leaderboard = not self.show_leaderboard
                    if self.show_leaderboard:
                        self.update_leaderboard()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ç–∏—Ü—ã
        if self.jump:
            self.jumpSpeed -= 1
            self.birdY -= self.jumpSpeed
            self.jump -= 1
            self.sprite = 1  # –ü—Ç–∏—Ü–∞ –ª–µ—Ç–∏—Ç –≤–≤–µ—Ä—Ö
        else:
            self.birdY += self.gravity
            self.gravity += 0.2
            self.sprite = 0  # –ü—Ç–∏—Ü–∞ –ª–µ—Ç–∏—Ç –≤–Ω–∏–∑

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
        self.bird[1] = self.birdY
        upRect = pygame.Rect(self.wallx, 360 + self.gap - self.offset + 10,
                           self.wallUp.get_width() - 10, self.wallUp.get_height())
        downRect = pygame.Rect(self.wallx, 0 - self.gap - self.offset - 10,
                             self.wallDown.get_width() - 10, self.wallDown.get_height())

        if upRect.colliderect(self.bird) or downRect.colliderect(self.bird):
            self.dead = True
        if not 0 < self.bird[1] < 720:
            self.dead = True

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞
        self.screen.fill((255, 255, 255))
        self.screen.blit(self.background, (0, 0))

        if self.show_leaderboard:
            self.draw_leaderboard()
        else:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç—Ä—É–±
            self.wallx -= 2
            if self.wallx < -80:
                self.wallx = 400
                self.counter += 1
                self.offset = random.randint(-110, 110)

            self.screen.blit(self.wallUp, (self.wallx, 360 + self.gap - self.offset))
            self.screen.blit(self.wallDown, (self.wallx, 0 - self.gap - self.offset))
            self.screen.blit(self.birdSprites[self.sprite], (70, self.birdY))

            font = pygame.font.SysFont("Arial", 50)
            score_text = font.render(str(self.counter), True, (255, 255, 255))
            self.screen.blit(score_text, (200, 50))

        pygame.display.update()

    def show_game_over(self):
        clock = pygame.time.Clock()
        self.update_leaderboard()  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ —Å—Ä–∞–∑—É
        
        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    return False
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_RETURN:
                        return True
                    elif event.key == pygame.K_ESCAPE:
                        pygame.quit()
                        return False
            
            self.screen.fill((255, 255, 255))
            self.screen.blit(self.background, (0, 0))
            
            # –®—Ä–∏—Ñ—Ç—ã
            title_font = pygame.font.SysFont("Arial", 50)
            font = pygame.font.SysFont("Arial", 30)
            
            # –¢–µ–∫—Å—Ç—ã
            game_over = title_font.render("–ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê!", True, (255, 255, 255))
            score = font.render(f"–í–ê–® –°–ß–Å–¢: {self.counter}", True, (255, 255, 255))
            continue_text = font.render("ENTER - –ù–û–í–ê–Ø –ò–ì–†–ê", True, (255, 255, 255))
            exit_text = font.render("ESC - –í–´–•–û–î", True, (255, 255, 255))
            
            # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–∏–∑–º–µ–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã y)
            game_over_rect = game_over.get_rect(centerx=self.screen.get_width() // 2, y=50)
            score_rect = score.get_rect(centerx=self.screen.get_width() // 2, y=120)
            
            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Å—á–µ—Ç–∞
            self.screen.blit(game_over, game_over_rect)
            self.screen.blit(score, score_rect)
            
            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ —Å–æ —Å–º–µ—â–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π y
            font = pygame.font.SysFont("Arial", 25)
            leaderboard_title = font.render("–¢–ê–ë–õ–ò–¶–ê –õ–ò–î–ï–†–û–í", True, (255, 255, 255))
            leaderboard_rect = leaderboard_title.get_rect(centerx=self.screen.get_width() // 2, y=200)
            self.screen.blit(leaderboard_title, leaderboard_rect)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
            y = 250  # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
            if not self.leaderboard_data:
                text = font.render("–ù–µ—Ç —Ä–µ–∫–æ—Ä–¥–æ–≤", True, (255, 255, 255))
                text_rect = text.get_rect(centerx=self.screen.get_width() // 2, y=y)
                self.screen.blit(text, text_rect)
            else:
                medals = ["ü•á", "ü•à", "ü•â"]
                for item in self.leaderboard_data:
                    position = item["position"]
                    if position <= 3:
                        medal = medals[position - 1]
                        text = f"{medal} {item['username']}"
                        score = f"{item['score']}"
                        
                        name_text = font.render(text, True, (255, 255, 255))
                        name_rect = name_text.get_rect(centerx=self.screen.get_width() // 2 - 50, y=y)
                        self.screen.blit(name_text, name_rect)
                        
                        score_text = font.render(score, True, (255, 255, 255))
                        score_rect = score_text.get_rect(left=name_rect.right + 20, centery=name_rect.centery)
                        self.screen.blit(score_text, score_rect)
                        
                        y += 40
            
            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É
            continue_rect = continue_text.get_rect(centerx=self.screen.get_width() // 2, y=550)
            exit_rect = exit_text.get_rect(centerx=self.screen.get_width() // 2, y=600)
            
            self.screen.blit(continue_text, continue_rect)
            self.screen.blit(exit_text, exit_rect)
            
            pygame.display.update()
            clock.tick(60)

class AuthApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        self.token = None

        tk.Label(self.root, text="–õ–æ–≥–∏–Ω").pack(pady=5)
        self.username_entry = tk.Entry(self.root)
        self.username_entry.pack(pady=5)

        tk.Label(self.root, text="–ü–∞—Ä–æ–ª—å").pack(pady=5)
        self.password_entry = tk.Entry(self.root, show="*")
        self.password_entry.pack(pady=5)

        tk.Button(self.root, text="–í–æ–π—Ç–∏", command=self.login).pack(pady=5)
        tk.Button(self.root, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", command=self.open_registration).pack(pady=5)
        tk.Button(self.root, text="–ó–∞–∫—Ä—ã—Ç—å", command=self.root.quit).pack(pady=5)

    def login(self):
        username = self.username_entry.get()
        password = self.password_entry.get()
        try:
            response = requests.post("http://127.0.0.1:8001/login", 
                json={"username": username, "password": password})
            response.raise_for_status()
            self.token = response.json().get("token")
            print(f"Received token: {self.token}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–í—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!")
            self.root.destroy()
            self.start_game()
        except requests.RequestException as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")

    def open_registration(self):
        reg_window = tk.Toplevel(self.root)
        reg_window.title("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")

        tk.Label(reg_window, text="–õ–æ–≥–∏–Ω").pack(pady=5)
        username_entry = tk.Entry(reg_window)
        username_entry.pack(pady=5)

        tk.Label(reg_window, text="–ü–∞—Ä–æ–ª—å").pack(pady=5)
        password_entry = tk.Entry(reg_window, show="*")
        password_entry.pack(pady=5)

        tk.Label(reg_window, text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è").pack(pady=5)
        confirm_password_entry = tk.Entry(reg_window, show="*")
        confirm_password_entry.pack(pady=5)

        def register():
            username = username_entry.get()
            password = password_entry.get()
            confirm_password = confirm_password_entry.get()

            if password != confirm_password:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
                return

            try:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
                data = {
                    "username": username,
                    "password": password
                }
                response = requests.post(
                    "http://127.0.0.1:8001/register", 
                    json=data,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º json –≤–º–µ—Å—Ç–æ params
                    headers={"Content-Type": "application/json"}
                )
                
                if response.status_code == 200:
                    messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.")
                    reg_window.destroy()
                else:
                    error_message = response.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {error_message}")
                    
            except requests.RequestException as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")

        tk.Button(reg_window, text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", command=register).pack(pady=5)

    def start_game(self):
        if not self.token:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            headers = {"Authorization": f"Bearer {self.token}"}
            response = requests.get("http://127.0.0.1:8001/me", headers=headers)
            
            if response.status_code == 200:
                game = FlappyBird(self.token)
                game.run()
            else:
                error_message = response.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {error_message}")
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
                self.__init__()
                self.run()
                
        except requests.RequestException as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
            return

    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    app = AuthApp()
    app.run()
